"""
{{cookiecutter.project_name}} Clickfile.

Index:

- Docker Commands
- Django Commands
- Asset Commands
{% if cookiecutter.use_heroku.lower() == "y" %}- Heroku Commands{% endif %}
- Root-Level Commands

"""
# flake8: noqa: E501

import os
import subprocess
import shutil
from klak.cli import root
from klak.utils import run, shell
import click
from path import Path


PROJECT_SLUG = "{{cookiecutter.project_slug}}"
HEROKU_SLUG = "{{cookiecutter.heroku_slug}}"
HEROKU_PROCESS_WORKERS = {
    "dev": 2,
    "prod": 5,
}
LOCALIZED_APPS = ("web", )
LANGUAGES = ()
DJANGO_BUILD_PATH = Path("./django/.build/")


def _clean_stdout(output):
    return output.decode("utf-8").strip()


# Docker Commands
# =====================================


@root.group()
def docker():
    """Docker commands."""
    pass


@docker.command(name="build")
def docker_build():
    """Build the local docker container."""
    shell(
        f"docker build -f docker/base/Dockerfile -t {PROJECT_SLUG}/web docker")


@docker.command(name="up")
@click.option("-b", "--build", is_flag=True, help="Build local container(s)")
@click.pass_context
def docker_up(ctx, build):
    """Bring up local containers."""
    if build:
        ctx.invoke(docker_build)

    shell(f"docker-compose -p {PROJECT_SLUG} up -d")


@docker.command(name="down")
def docker_down():
    """Remove local containers."""
    shell("docker-compose down")


@docker.command(name="stop")
def docker_stop():
    """Stop local containers."""
    shell("docker-compose stop")


@docker.command(name="ls")
def docker_ls():
    """List running containers."""
    shell("docker ps")


# Django Commands
# =====================================


@root.group()
def django():
    """Django commands."""
    pass


@django.command(name="envfile")
def django_envfile():
    """Initialize default .env."""
    shell("cp -n django/env.dist django/.env")


@django.command(name="install")
def django_install():
    """Install Python dependencies."""
    shell(
        f"docker exec -it {PROJECT_SLUG}_django pip install -r requirements/local.txt")


@django.command(name="shell")
def django_shell():
    """Get an interactive Django shell."""
    shell(f"docker exec -it {PROJECT_SLUG}_django /bin/bash")


@django.command(name="reset_db")
def django_reset_db():
    """Reset Django/Postgres database."""
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py reset_db_cms --noinput")

{% if cookiecutter.use_geo.lower() == "y" %}
@django.command(name="reset_postgis")
def django_reset_postgis():
    """Reset Django/Postgres postgis."""
    shell(
        f'docker exec -u postgres -it {PROJECT_SLUG}_postgres psql -d djangodb -c "CREATE EXTENSION postgis;"')
{% endif %}


@django.command(name="migrate")
def django_migrate():
    """Run Django migrations."""
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py migrate")


@django.command(name="make_migrations")
@click.option('--app', default=None, help='The app to migrate')
@click.option('--empty', is_flag=True, default=False, help='Is empty?')
def django_make_migrations(app, empty):
    """Run Django migrations."""
    app = '' if app is None else ' \"' + app + '\"'
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py makemigrations{app}{ ' --empty' if empty else ''}")


@django.command(name="create_default_user")
def django_create_default_user():
    """Create a default super user."""
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py create_default_user")


@django.command(name="po")
@click.option(
    "--apps", default=",".join(LOCALIZED_APPS), help="A comma-separated list")
@click.option(
    "--languages", default=",".join(LANGUAGES), help="A comma-separated list")
def django_po(apps, languages):
    """Create/update .po files."""
    _apps = apps.split(",")
    _languages = languages.split(",")

    for app in _apps:
        _create_locale_dir(app)

    for language in languages:
        _create_po_files(language)


def _create_locale_dir(app):
    shell(
        f"docker exec -it {PROJECT_SLUG}_django mkdir -p project/app/{app}/locale")


def _create_po_files(lang):
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py makemessages -l {lang}")
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py makemessages -d djangojs --ignore project/\@static/node_modules/ -e ts -l {lang}")



@django.command(name="mo")
def django_mo():
    """Compile .mo files."""
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py compilemessages")


@django.command(name="serve")
def django_serve():
    """Run Django dev server."""
    shell(
        f"docker exec -it {PROJECT_SLUG}_django python manage.py runserver 0.0.0.0:8000")


@django.command(name="test")
def django_test():
    """Run Django test suite(s)."""
    shell(f"docker exec -it {PROJECT_SLUG}_django pytest")


@django.command(name="init")
@click.pass_context
def django_init(ctx):
    """Initialze local Django container."""

    click.echo("\n Running: klak django_envfile \n")
    ctx.invoke(django_envfile)

    click.echo("\n Running: klak django_install \n")
    ctx.invoke(django_install)

    click.echo("\n Running: klak django_reset_db \n")
    ctx.invoke(django_reset_db)
    {% if cookiecutter.use_geo.lower() == "y" %}

    click.echo("\n Running: klak django_reset_postgis \n")
    ctx.invoke(django_reset_postgis)
    {% endif %}

    click.echo("\n Running: klak django_migrate \n")
    ctx.invoke(django_migrate)

    click.echo("\n Running: klak django_create_default_user \n")
    ctx.invoke(django_create_default_user)


# Asset Commands
# =====================================


@root.group()
def assets():
    """Static asset commands."""


@assets.command(name="init")
def assets_init():
    """Install local NPM dependencies."""
    shell("cd django/project/@static && npm install")


@assets.command(name="watch")
def assets_watch():
    """Compile and watch local static assets."""
    shell("cd django/project/@static && npm run watch")


@assets.command(name="build")
def assets_build():
    """Compile local static assets for production."""
    shell("cd django/project/@static && npm run build")

{% if cookiecutter.use_heroku.lower() == "y" %}
# Heroku Commands
# =====================================

def _ensure_brew():
    has_brew = shutil.which("brew")
    if not has_brew:
        raise click.UsageError("Brew not installed.")


def _ensure_heroku():
    has_heroku = shutil.which("heroku")
    if not has_heroku:
        raise click.UsageError("Heroku not installed.")


@root.group()
def heroku():
    """Heroku Commands."""
    pass


@heroku.command(name="login")
def heroku_login():
    """Login to Heroku."""
    run(["heroku", "login", ])
    run(["heroku", "container:login", ])


@heroku.command(name="create")
@click.argument("heroku_slug", nargs=1, default=HEROKU_SLUG)
@click.option("-r", "--heroku_remote", required=True, help="The Heroku (Git) remote.")
def heroku_create(heroku_slug, heroku_remote):
    """Create HEROKU_SLUG-HEROKU_REMOTE app."""
    app_name = f"{heroku_slug}-{heroku_remote}"
    shell(f"heroku create {app_name} -r {heroku_remote}")
    shell(f"heroku addons:create heroku-postgresql:hobby-dev -r {heroku_remote}")


@heroku.command(name="destroy")
@click.argument("heroku_slug", nargs=1, default=HEROKU_SLUG)
@click.option("-r", "--heroku_remote", required=True, help="The Heroku (Git) remote.")
def heroku_destroy(heroku_slug, heroku_remote):
    """Destroy HEROKU_SLUG-HEROKU_REMOTE app."""
    app_name = f"{heroku_slug}-{heroku_remote}"
    shell(f"heroku apps:destroy {app_name}")


@heroku.command(name="configure")
@click.argument("heroku_slug", nargs=1, default=HEROKU_SLUG)
@click.option("-r", "--heroku_remote", required=True, help="The Heroku (Git) remote.")
@click.option("--django_settings_module", prompt=True, default="app.config.settings.prod")
@click.option("--debug", prompt=True, default="False")
@click.option("--log-level", prompt=True, default="ERROR")
@click.option(
    "--allowed_hosts", prompt=True, default=".herokuapp.com,",
    help="Format: .domain1.com,.domain2.com")
@click.option("--secret_key", prompt=True, required=True)
@click.option("--use_https_for_assets", prompt=True, default=True)
@click.option("--secure_ssl_redirect", prompt=True, default=True)
@click.option("--session_cookie_secure", prompt=True, default=True)
@click.option("--meta_site_protocol", prompt=True, default="https")
@click.option("--crsf_cookie_secure", prompt=True, default=True)
@click.option("--cms_plugin_cache", prompt=True, default=True)
@click.option("--cms_placeholder_cache", prompt=True, default=True)
@click.option("--cms_page_cache", prompt=True, default=True)
@click.option("--uploadcare_pub_key", prompt=True, default="demopublickey")
@click.option("--uploadcare_secret_key", prompt=True, default="demoprivatekey")
def heroku_configure(heroku_slug, heroku_remote, *args, **kwargs):
    """Configure HEROKU_SLUG-HEROKU_REMOTE app.

    Loop over provided prompt values to set config.

    Notes:
        * Add additional @click.option(...prompt=True)
          to add more config values.
    """
    app_name = f"{heroku_slug}-{heroku_remote}"
    config_str = ""
    for key, value in kwargs.items():
        config_key = str(key).upper()
        config_value = str(value).strip()
        config_str += f'{config_key}={config_value} '

    shell(f"heroku config:set {config_str} -r {heroku_remote}")


@heroku.command(name="deploy")
@click.argument("heroku_slug", nargs=1, default=HEROKU_SLUG)
@click.option("-r", "--heroku_remote", required=True, help="The Heroku (Git) remote.")
@click.option(
    "-w", "--process_workers", help="The number of workers to deploy on this container")
@click.pass_context
def heroku_deploy(ctx, heroku_slug, heroku_remote, process_workers):
    """Deploy HEROKU_SLUG-HEROKU_REMOTE app."""
    if not process_workers:
        try:
            process_workers = HEROKU_PROCESS_WORKERS[heroku_remote]
        except AttributeError:
            raise click.UsageError("-w, --process_workers is required.")

    app_name = f"{heroku_slug}-{heroku_remote}"
    ctx.invoke(assets_build)
    heroku_docker_build_env(app_name)
    heroku_container_deploy(app_name, process_workers)


def heroku_container_deploy(app_name, process_workers):
    """Deploy using `heroku container` commands."""

    push_cmd = f"heroku container:push -a {app_name} web --arg WORKERS={process_workers},ASSET_VERSION={_asset_version()}"
    release_cmd = f"heroku container:release web -a {app_name}"
    migrate_cmd = f"heroku run python manage.py migrate -a {app_name}"
    clear_cache_cmd = f"heroku run python manage.py clear_cache -a {app_name}"
    createsuperuser_cmd = f"heroku run python manage.py createsuperuser -a {app_name}"

    subprocess.run(push_cmd, check=True, shell=True)
    subprocess.run(release_cmd, check=True, shell=True)
    subprocess.run(migrate_cmd, check=True, shell=True)
    subprocess.run(clear_cache_cmd, check=True, shell=True)
    subprocess.run(createsuperuser_cmd, check=True, shell=True)

    shutil.rmtree(DJANGO_BUILD_PATH.realpath())


def heroku_docker_build_env(app_name):
    """Create Heroku deploy container .env."""
    env_path = os.path.join(DJANGO_BUILD_PATH.realpath(), ".env")
    secret_key = subprocess.check_output(
        f"heroku config:get SECRET_KEY -a {app_name}", shell=True)

    DJANGO_BUILD_PATH.mkdir_p()
    env_path.remove_p()
    secret_key = _clean_stdout(secret_key)

    with open(env_path, "a") as env_file:
        env_file.write(f'ASSET_VERSION="{_asset_version()}"\n')
        env_file.write(f'SECRET_KEY="{secret_key}"\n')


def _asset_version():
    """Get the current ASSET_VERSION."""
    asset_version = subprocess.check_output("git rev-parse HEAD", shell=True)
    return _clean_stdout(asset_version)


@heroku.command(name="init")
@click.pass_context
def heroku_init(ctx):
    """Init system for Heroku."""
    heroku_cli_install()
    heroku_plugins_install()
    ctx.invoke(heroku_login)


def heroku_cli_install():
    """Install heroku cli."""
    _ensure_brew()
    try:
        _ensure_heroku()
        click.echo("Heroku CLI already installed.")
    except click.UsageError:
        shell("brew install heroku/brew/heroku")


def heroku_plugins_install():
    """Install Heroku plugins."""
    shell("heroku plugins:install @heroku-cli/plugin-container-registry")


@heroku.command(name="add_remote")
@click.argument("heroku_slug", nargs=1, default=HEROKU_SLUG)
@click.option("-r", "--heroku_remote", required=True, help="The Heorku remote.")
def heroku_add_remote(heroku_slug, heroku_remote):
    """Add HEROKU_SLUG-HREOKU_REMOTE app remote."""
    app_name = f"{heroku_slug}-{heroku_remote}"
    shell(f"git remote add {heroku_remote} https://git.heroku.com/{app_name}.git")


@heroku.command(name="import_db")
@click.argument("heroku_slug", nargs=1, default=HEROKU_SLUG)
@click.option("-r", "--heroku_remote", required=True, help="The Heorku remote.")
@click.option(
    "-c", "--capture", is_flag=True, help="Capture new backup before downloading")
def heroku_import_db(heroku_slug, heroku_remote, capture):
    """Import DB from HEROKU_SLUG-HEROKU_REMOTE."""
    app_name = f"{heroku_slug}-{heroku_remote}"
    latest_dump = Path("./latest.dump")
    latest_dump.remove_p()

    if capture:
        _capture_heroku_db(app_name)

    click.echo("Downloading db from Heroku...")

    shell(f"heroku pg:backups:download -a {app_name} -o {latest_dump.realpath()}")
    _restore_heroku_db()

    # Do some cleanup
    latest_dump.remove_p()


def _restore_heroku_db():
    """Import Heroku db into local Postgres container."""
    postgres_app_root = "/usr/app/django"
    postgres_db_dump = f"{postgres_app_root}/latest.dump"
    postgres_restore_script = f"{postgres_app_root}/scripts/heroku_restore_db.sh"
    postgres_import_exec = f"su postgres -c '{postgres_restore_script} import {postgres_db_dump}'"

    click.echo("Importing db into local postgres...")
    shell(f"docker exec -it {PROJECT_SLUG}_postgres {postgres_import_exec}")


def _capture_heroku_db(app_name):
    """Create a new postgres backup on Heroku."""
    click.echo("Capturing new backup, this may take a minute...")
    shell(f"heroku pg:backups:capture -a {app_name} > /dev/null")
{% endif %}

# Root-Level Commands
# =====================================


@root.command(name="init")
@click.pass_context
def root_init(ctx):
    """Initialize project."""
    ctx.invoke(django_init)
    ctx.invoke(assets_init)


@root.command(name="serve")
@click.pass_context
def root_serve(ctx):
    """Serve project."""
    ctx.invoke(django_serve)


@root.command(name="watch")
@click.pass_context
def root_watch(ctx):
    """Compile and watch project assets."""
    ctx.invoke(assets_watch)


@root.command(name="up")
@click.option(
    "-b", "--build", is_flag=True, help="Build local container(s)")
@click.pass_context
def root_up(ctx, build):
    """Bring up project container(s)."""
    ctx.invoke(docker_up, build=build)


@root.command(name="test")
@click.pass_context
def root_test(ctx):
    """Run project test suite(s)."""
    ctx.invoke(django_test)
